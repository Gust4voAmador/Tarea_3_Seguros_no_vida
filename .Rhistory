n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Llenar el dataframe
df_convolucion[["x"]] <- 0:n
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 0.8, prob_montos = c(0.25,0.375, 0.375), max_num_reclamos = 6)
print(pepe)
# --- Paso 1: Distribuciones transformadas ---
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# --- Paso 2: Método alternativo con tabla detallada ---
metodo_alternativo_con_tabla <- function(lambda_total, probs, max_valor) {
lambdas <- lambda_total * probs
saltos <- c(1, 2, 3)
# Calcular distribuciones individuales transformadas
dist1 <- poisson_transformada(lambdas[1], saltos[1], max_valor)
dist2 <- poisson_transformada(lambdas[2], saltos[2], max_valor)
dist3 <- poisson_transformada(lambdas[3], saltos[3], max_valor)
# Calcular convolución N1 + 2N2
conv_12 <- convoluciador(dist1, dist2)
# Calcular convolución final: N1 + 2N2 + 3N3
conv_123 <- convoluciador(conv_12, dist3)
# Construir tabla estilo libro
df <- data.frame(
x = 0:max_valor,
`Pr(1N1 = x)` = dist1,
`Pr(2N2 = x)` = dist2,
`Pr(3N3 = x)` = dist3,
`Pr(N1 + 2N2 = x)` = conv_12,
`f_s(x)` = conv_123
)
return(df)
}
# --- Ejecutar la función ---
resultado_detallado <- metodo_alternativo_con_tabla(
lambda_total = 0.8,
probs = c(0.25, 0.375, 0.375),
max_valor = 6
)
print(resultado_detallado)
# --- Paso 1: Distribuciones transformadas ---
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# --- Paso 2: Método alternativo con tabla detallada ---
metodo_alternativo_con_tabla <- function(lambda_total, probs, max_valor) {
lambdas <- lambda_total * probs
saltos <- c(1, 2, 3)
# Calcular distribuciones individuales transformadas
dist1 <- poisson_transformada(lambdas[1], saltos[1], max_valor)
dist2 <- poisson_transformada(lambdas[2], saltos[2], max_valor)
dist3 <- poisson_transformada(lambdas[3], saltos[3], max_valor)
# Calcular convolución N1 + 2N2
conv_12 <- convoluciador(dist1, dist2)
# Calcular convolución final: N1 + 2N2 + 3N3
conv_123 <- convoluciador(conv_12, dist3)
# Construir tabla estilo libro
df <- data.frame(
x = 0:max_valor,
`Pr(1N1 = x)` = dist1,
`Pr(2N2 = x)` = dist2,
`Pr(3N3 = x)` = dist3,
`Pr(N1 + 2N2 = x)` = conv_12,
`f_s(x)` = conv_123
)
return(df)
}
# --- Ejecutar la función ---
resultado_detallado <- metodo_alternativo_con_tabla(
lambda_total = 2,
probs = c((0.1*1),(0.1*2), (0.1*3),(0.1*4)),
max_valor = 6
)
print(resultado_detallado)
# --- Paso 1: Distribuciones transformadas ---
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# --- Paso 2: Método alternativo con tabla detallada ---
metodo_alternativo_con_tabla <- function(lambda_total, probs, max_valor) {
lambdas <- lambda_total * probs
saltos <- c(1, 2, 3)
# Calcular distribuciones individuales transformadas
dist1 <- poisson_transformada(lambdas[1], saltos[1], max_valor)
dist2 <- poisson_transformada(lambdas[2], saltos[2], max_valor)
dist3 <- poisson_transformada(lambdas[3], saltos[3], max_valor)
# Calcular convolución N1 + 2N2
conv_12 <- convoluciador(dist1, dist2)
# Calcular convolución final: N1 + 2N2 + 3N3
conv_123 <- convoluciador(conv_12, dist3)
# Construir tabla estilo libro
df <- data.frame(
x = 0:max_valor,
`Pr(1N1 = x)` = dist1,
`Pr(2N2 = x)` = dist2,
`Pr(3N3 = x)` = dist3,
`Pr(N1 + 2N2 = x)` = conv_12,
`f_s(x)` = conv_123
)
return(df)
}
# --- Ejecutar la función ---
resultado_detallado <- metodo_alternativo_con_tabla(
lambda_total = 2,
probs = c((0.1*1),(0.1*2), (0.1*3),(0.1*4)),
max_valor = 4
)
print(resultado_detallado)
combinacion_suma <- function(vec1, vec2, indice_df) { #donde x es indice
suma <- 0
if (indice_df == 0) {
suma <- vec1[1] * vec2[1]
return(suma)
}
else {
for (i in 0:indice_df) {
suma <- suma + vec1[1 + i] * vec2[(indice_df + 1) - i]
}
return(suma)
}
}
convoluciador <- function(vec_conv1, vec_conv2){
# Creación de vector para guardar los resultados de los productos
vec_nueva_conv <- vector(mode = "numeric", length = length(vec_conv1))
for (i in 1:length(vec_conv1)) {
indice= i-1
vec_nueva_conv[i] <- combinacion_suma(vec_conv1, vec_conv2, indice)
}
return(vec_nueva_conv)
}
metodo_basico <- function(lambda, prob_montos, max_num_reclamos) {
n <- max_num_reclamos
# Crear nombres de columnas
columnas <- c("x", "p*0(x)", "p(x)", paste0("p*", 2:n, "(x)"), "fs(x)")
# Crear el data.frame con n+1 filas
df_convolucion <- as.data.frame(matrix(0, nrow = n + 1, ncol = length(columnas)))
colnames(df_convolucion) <- columnas
# Llenar el dataframe
df_convolucion[["x"]] <- 0:n
prob_montos <- c(0, prob_montos)
df_convolucion[["p*0(x)"]] <- c(1, rep(0, n))  # p*0(x)
df_convolucion[["p(x)"]][1:length(prob_montos)] <- prob_montos  # p(x)
# Calcular p*2(x)
df_convolucion[["p*2(x)"]] <- convoluciador(df_convolucion[[3]], df_convolucion[[3]])
# Calcular p*3(x), ..., p*n(x)
for (i in 5:(n + 2)) {
a <- i - 1
df_convolucion[[i]] <- convoluciador(df_convolucion[[3]], df_convolucion[[a]])
}
# Vector de probabilidades de Poisson(lambda)
vec_prob_N <- sapply(0:n, function(i) dpois(i, lambda))
# Calcular fs(x)
for (i in 1:(n + 1)) {
v <- as.numeric(df_convolucion[i, ])
v_sin_extremos <- v[-c(1, length(v))]  # Quitamos x y fs(x)
df_convolucion[["fs(x)"]][i] <- sum(v_sin_extremos * vec_prob_N)
}
return(df_convolucion)
}
# Llamar correctamente a la función
pepe <- metodo_basico(lambda = 2, prob_montos = c((0.1*1),(0.1*2), (0.1*3),(0.1*4)), max_num_reclamos = 4)
print(pepe)
# --- Paso 1: Distribuciones transformadas ---
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# --- Paso 2: Método alternativo con tabla detallada ---
metodo_alternativo_con_tabla <- function(lambda_total, probs, max_valor) {
lambdas <- lambda_total * probs
saltos <- c(1, 2, 3)
# Calcular distribuciones individuales transformadas
dist1 <- poisson_transformada(lambdas[1], saltos[1], max_valor)
dist2 <- poisson_transformada(lambdas[2], saltos[2], max_valor)
dist3 <- poisson_transformada(lambdas[3], saltos[3], max_valor)
# Calcular convolución N1 + 2N2
conv_12 <- convoluciador(dist1, dist2)
# Calcular convolución final: N1 + 2N2 + 3N3
conv_123 <- convoluciador(conv_12, dist3)
# Construir tabla estilo libro
df <- data.frame(
x = 0:max_valor,
`Pr(1N1 = x)` = dist1,
`Pr(2N2 = x)` = dist2,
`Pr(3N3 = x)` = dist3,
`Pr(N1 + 2N2 = x)` = conv_12,
`f_s(x)` = conv_123
)
return(df)
}
# --- Ejecutar la función ---
resultado_detallado <- metodo_alternativo_con_tabla(
lambda_total = 2,
probs = c((0.1*1),(0.1*2), (0.1*3),(0.1*4)),
max_valor = 4
)
print(resultado_detallado)
recursiva_poi <- function(lambda, x, f_X){
f_S0 <- exp(-lambda * (1-f_X[1]))
if(x==0){
f_Sx <- f_S0
} else{
suma = 0
# Se define el máximo valor “y” que existe en f_X:
max_y <- length(f_X) - 1
for(y in 1:min(x, max_y)){
suma <- suma+ y * f_X[y+1] * recursiva_poi(lambda, (x-y), f_X)
}
f_Sx <- (lambda/x) * suma
}
return(f_Sx)
}
recursiva_bin <- function(n, q, x, f_X){
f_S0 <- (1 + q * (f_X[1] - 1))^n
if(x == 0){
f_Sx <- f_S0
} else{
suma <- 0
# Se define el máximo valor “y” que existe en f_X:
max_y <- length(f_X) - 1
for(y in 1:min(x, max_y)){
suma <- suma + ((n+1) * y/x - 1) * f_X[y+1] * recursiva_bin(n, q, (x-y), f_X)
}
f_Sx <- q/(1 + q * (f_X[1]-1)) * suma
}
return(f_Sx)
}
recursiva_nb <- function(r, beta, x, f_X){
f_S0 <- (1 - beta * (f_X[1] - 1))^(-r)
if(x == 0){
f_Sx <- f_S0
} else{
suma <- 0
# Se define el máximo valor “y” que existe en f_X:
max_y <- length(f_X) - 1
for(y in 1:min(x, max_y)){
suma <- suma + (1 + (r-1) * y/x) * f_X[y+1] * recursiva_nb(r, beta, (x-y), f_X)
}
f_Sx <- beta/(1 - beta * (f_X[1] - 1)) * suma
}
return(f_Sx)
}
# Parámetros
f_X <- c(0, 0.7, 0.3)
x <- 5
lambda <- 4.5
r <- 4.5
p <- 0.5
m <- 9
beta <- 0.5
a <- sapply(0:5, function(x) recursiva_poi(lambda, x, f_X))
cat('$f_S(x)$ para x = 0, 1, 2, ..., 5:', a)
b <- sapply(0:5, function(x) recursiva_nb(r, beta, x, f_X))
cat('$f_S(x)$ para x = 0, 1, 2, ..., 5:', b)
c <- sapply(0:5, function(x) recursiva_bin(m, p, x, f_X))
cat('$f_S(x)$ para x = 0, 1, 2, ..., 5:', c)
# --- Paso 1: Distribuciones transformadas ---
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# --- Paso 2: Método alternativo con tabla detallada ---
metodo_alternativo_con_tabla <- function(lambda_total, probs, max_valor) {
lambdas <- lambda_total * probs
saltos <- c(1, 2, 3)
# Calcular distribuciones individuales transformadas
dist1 <- poisson_transformada(lambdas[1], saltos[1], max_valor)
dist2 <- poisson_transformada(lambdas[2], saltos[2], max_valor)
dist3 <- poisson_transformada(lambdas[3], saltos[3], max_valor)
# Calcular convolución N1 + 2N2
conv_12 <- convoluciador(dist1, dist2)
# Calcular convolución final: N1 + 2N2 + 3N3
conv_123 <- convoluciador(conv_12, dist3)
# Construir tabla estilo libro
df <- data.frame(
x = 0:max_valor,
`Pr(1N1 = x)` = dist1,
`Pr(2N2 = x)` = dist2,
`Pr(3N3 = x)` = dist3,
`Pr(N1 + 2N2 = x)` = conv_12,
`f_s(x)` = conv_123
)
return(df)
}
# --- Ejecutar la función ---
resultado_detallado <- metodo_alternativo_con_tabla(
lambda_total = 2,
probs = c((0.1*1),(0.1*2), (0.1*3),(0.1*4)),
max_valor = 6
)
print(resultado_detallado)
# --- Paso 1: Distribuciones transformadas ---
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# --- Paso 2: Método alternativo con tabla detallada ---
metodo_alternativo_con_tabla <- function(lambda_total, probs, max_valor) {
lambdas <- lambda_total * probs
saltos <- c(1, 2, 3)
# Calcular distribuciones individuales transformadas
dist1 <- poisson_transformada(lambdas[1], saltos[1], max_valor)
dist2 <- poisson_transformada(lambdas[2], saltos[2], max_valor)
dist3 <- poisson_transformada(lambdas[3], saltos[3], max_valor)
# Calcular convolución N1 + 2N2
conv_12 <- convoluciador(dist1, dist2)
# Calcular convolución final: N1 + 2N2 + 3N3
conv_123 <- convoluciador(conv_12, dist3)
# Construir tabla estilo libro
df <- data.frame(
x = 0:max_valor,
`Pr(1N1 = x)` = dist1,
`Pr(2N2 = x)` = dist2,
`Pr(3N3 = x)` = dist3,
`Pr(N1 + 2N2 = x)` = conv_12,
`f_s(x)` = conv_123
)
return(df)
}
# --- Ejecutar la función ---
resultado_detallado <- metodo_alternativo_con_tabla(
lambda_total = 0.8,
probs = c((0.25),(0.375), (0.375),(0.375)),
max_valor = 4
)
print(resultado_detallado)
# Función para calcular Poisson transformada
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# Función para convolucionar dos vectores
convoluciador <- function(vec1, vec2) {
len <- length(vec1)
resultado <- rep(0, len)
for (i in 0:(len - 1)) {
for (j in 0:i) {
resultado[i + 1] <- resultado[i + 1] + vec1[j + 1] * vec2[i - j + 1]
}
}
return(resultado)
}
# Función general que construye toda la tabla
metodo_general_con_tabla <- function(lambda_total, prob_montos, max_valor) {
n_montos <- length(prob_montos)
montos <- 1:n_montos
lambdas <- lambda_total * prob_montos
# Distribuciones transformadas individuales
distribuciones <- lapply(seq_along(montos), function(i) {
poisson_transformada(lambdas[i], montos[i], max_valor)
})
# Inicializar convolución acumulada
resultado_conv <- distribuciones[[1]]
if (n_montos > 1) {
for (i in 2:n_montos) {
resultado_conv <- convoluciador(resultado_conv, distribuciones[[i]])
}
}
# Construir la tabla final
tabla <- data.frame(x = 0:max_valor)
for (i in seq_along(distribuciones)) {
nombre_col <- paste0("Pr(", montos[i], "N", i, " = x)")
tabla[[nombre_col]] <- distribuciones[[i]]
}
if (n_montos >= 2) {
tabla[["Pr(N1 + ... + Nk-1 = x)"]] <- resultado_conv
}
tabla[["f_S(x)"]] <- resultado_conv
return(tabla)
}
resultado <- metodo_general_con_tabla(
lambda_total = 2,
prob_montos = c(0.1, 0.2, 0.3, 0.4), # Montos 1, 2, 3, 4
max_valor = 10
)
print(resultado)
resultado <- metodo_general_con_tabla(
lambda_total = 2,
prob_montos = c(0.1, 0.2, 0.3, 0.4), # Montos 1, 2, 3, 4
max_valor = 4
)
print(resultado)
# Función para calcular Poisson transformada
poisson_transformada <- function(lambda, salto, max_valor) {
vec <- rep(0, max_valor + 1)
for (n in 0:(max_valor %/% salto)) {
x <- n * salto
if (x <= max_valor) {
vec[x + 1] <- dpois(n, lambda)
}
}
return(vec)
}
# Función para convolucionar dos vectores
convoluciador2 <- function(vec1, vec2) {
len <- length(vec1)
resultado <- rep(0, len)
for (i in 0:(len - 1)) {
for (j in 0:i) {
resultado[i + 1] <- resultado[i + 1] + vec1[j + 1] * vec2[i - j + 1]
}
}
return(resultado)
}
# Función general que construye toda la tabla
metodo_general_con_tabla <- function(lambda_total, prob_montos, max_valor) {
n_montos <- length(prob_montos)
montos <- 1:n_montos
lambdas <- lambda_total * prob_montos
# Distribuciones transformadas individuales
distribuciones <- lapply(seq_along(montos), function(i) {
poisson_transformada(lambdas[i], montos[i], max_valor)
})
# Inicializar convolución acumulada
resultado_conv <- distribuciones[[1]]
if (n_montos > 1) {
for (i in 2:n_montos) {
resultado_conv <- convoluciador2(resultado_conv, distribuciones[[i]])
}
}
# Construir la tabla final
tabla <- data.frame(x = 0:max_valor)
for (i in seq_along(distribuciones)) {
nombre_col <- paste0("Pr(", montos[i], "N", i, " = x)")
tabla[[nombre_col]] <- distribuciones[[i]]
}
if (n_montos >= 2) {
tabla[["Pr(N1 + ... + Nk-1 = x)"]] <- resultado_conv
}
tabla[["f_S(x)"]] <- resultado_conv
return(tabla)
}
solv_clasica <- metodo_basico(lambda = 2, prob_montos = c((0.1*1),(0.1*2), (0.1*3),(0.1*4)), max_num_reclamos = 4)
print(solv_clasica)
resultado <- metodo_alternativo (
lambda_total = 2,
prob_montos = c(0.1, 0.2, 0.3, 0.4), # Montos 1, 2, 3, 4
max_valor = 4
)
print(resultado)
setwd("C:/Users/AMADOR/OneDrive - Universidad de Costa Rica/I-2025/Seguros de no-vida/Tarea 3 Seguros no vida")
git status
